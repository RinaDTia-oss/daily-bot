import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReactionTypeEmoji
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)
import json
import os
from datetime import datetime
from random import choice

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
import os
TOKEN = os.getenv("TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")
COMMENT_GROUP_ID = int(os.getenv("COMMENT_GROUP_ID"))
DATA_FILE = "daily_planner_data.json"
# ==================

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    return {
        "tasks": [],
        "plans": [],
        "reactions": ["—Ç—ã –º–æ–ª–æ–¥–µ—Ü", "–∑–¥–æ—Ä–æ–≤–æ", "–æ—Ç–ª–∏—á–Ω–æ —Å–ø—Ä–∞–≤–∏–ª–∞—Å—å", "–ø—Ä–µ–∫—Ä–∞—Å–Ω–æ!", "–≤–æ—Å—Ö–∏—Ç–∏—Ç–µ–ª—å–Ω–æ", "–≥–æ—Ä–∂—É—Å—å —Ç–æ–±–æ–π"]
    }

def save_data(data):
    with open(DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

data = load_data()
user_tasks = data.get("tasks", [])
plans = data.get("plans", [])
reactions = data.get("reactions", [])

def save():
    data["tasks"] = user_tasks
    data["plans"] = plans
    save_data(data)

# –°–º–∞–π–ª–∏–∫–∏
PRIORITIES = {
    "critical": "üî•",
    "high_month_year": "üêâ",
    "high_week": "ü¶é",
    "high_day": "üêç",
    "low": "üëΩ"
}
STATUSES = {
    "done": "üíã",
    "partial": "üòò",
    "bonus": "ü•∞",
    "failed_high": "ü§¶‚Äç‚ôÄÔ∏è",
    "failed_low": "üï∏"
}

# –¢–µ–≥–∏
TAGS = {
    "year": "#–≥–æ–¥–∏—á–Ω—ã–µ_–∫–æ–ª—å—Ü–∞",
    "month": "#–≤—ã—à–µ–ª_–º–µ—Å—è—Ü",
    "week": "#—Ç—Ä—É—Å—ã_–Ω–µ–¥–µ–ª—å–∫–∞"
}

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±–æ—Ç-–µ–∂–µ–¥–Ω–µ–≤–Ω–∏–∫. –ò—Å–ø–æ–ª—å–∑—É–π /plan, —á—Ç–æ–±—ã —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø–ª–∞–Ω, /add_a_task, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É, –∏ /report, —á—Ç–æ–±—ã —Å–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç.")

# /add_a_task <–∑–∞–¥–∞—á–∞>
async def add_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    task_text = ' '.join(context.args)
    if not task_text:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –∑–∞–¥–∞—á—É. –ü—Ä–∏–º–µ—Ä: /add_a_task –ü–æ–ø–∏—Ç—å –≤–æ–¥—ã")
        return
    if task_text in user_tasks:
        await update.message.reply_text("–¢–∞–∫–∞—è –∑–∞–¥–∞—á–∞ —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ.")
    else:
        user_tasks.append(task_text)
        save()
        await update.message.reply_text(f"–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {task_text}")

# /plan
async def plan_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–ì–æ–¥", callback_data="plan_year")],
        [InlineKeyboardButton("–ú–µ—Å—è—Ü", callback_data="plan_month")],
        [InlineKeyboardButton("–ù–µ–¥–µ–ª—è", callback_data="plan_week")],
        [InlineKeyboardButton("–î–µ–Ω—å", callback_data="plan_day")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ù–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø–ª–∞–Ω?", reply_markup=reply_markup)

# –í—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞
async def plan_choose_period(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    period = query.data.split("_")[1]
    context.user_data['plan_period'] = period
    context.user_data['plan_tasks'] = []
    context.user_data['current_task_index'] = 0
    await show_add_task_menu(query, context)

# –ú–µ–Ω—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á
async def show_add_task_menu(destination, context: ContextTypes.DEFAULT_TYPE):
    period = context.user_data['plan_period']
    tasks = context.user_data['plan_tasks']
    keyboard = []

    for task in tasks:
        keyboard.append([InlineKeyboardButton(f"üìã {task['text']}", callback_data="noop")])

    if period == "day":
        for i, task in enumerate(user_tasks):
            if task not in [t['text'] for t in tasks]:
                keyboard.append([InlineKeyboardButton(f"‚úÖ {task}", callback_data=f"select_task_{i}")])

    keyboard.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—é", callback_data="manual_task")])
    if tasks:
        keyboard.append([InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="finish_selecting_tasks")])

    reply_markup = InlineKeyboardMarkup(keyboard)
    text = "–î–æ–±–∞–≤—å –∑–∞–¥–∞—á–∏. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å ‚Äî –Ω–∞–∂–º–∏ ¬´–ì–æ—Ç–æ–≤–æ¬ª."
    if hasattr(destination, 'edit_message_text'):
        await destination.edit_message_text(text=text, reply_markup=reply_markup)
    else:
        await destination.reply_text(text=text, reply_markup=reply_markup)

# –í—ã–±–æ—Ä –∑–∞–¥–∞—á–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ (–¥–ª—è –¥–Ω—è)
async def select_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    task_idx = int(query.data.split("_")[2])
    task_text = user_tasks[task_idx]
    if task_text not in [t['text'] for t in context.user_data['plan_tasks']]:
        context.user_data['plan_tasks'].append({"text": task_text, "priority": None, "deadline": None})
    await show_add_task_menu(query, context)

# –†—É—á–Ω–æ–π –≤–≤–æ–¥ –∑–∞–¥–∞—á–∏
async def manual_task_prompt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("–ù–∞–ø–∏—à–∏ –∑–∞–¥–∞—á—É:")
    context.user_data['awaiting_task'] = True

# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä—É—á–Ω—É—é –≤–≤–µ–¥—ë–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏
async def receive_manual_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get('awaiting_task'):
        return
    task_text = update.message.text.strip()
    if task_text:
        context.user_data['plan_tasks'].append({"text": task_text, "priority": None, "deadline": None})
    context.user_data['awaiting_task'] = False
    await show_add_task_menu(update.message, context)

# –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä –∑–∞–¥–∞—á ‚Üí –ø–µ—Ä–µ–π—Ç–∏ –∫ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º
async def finish_selecting_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if not context.user_data['plan_tasks']:
        await query.edit_message_text("–¢—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏.")
        return
    context.user_data['current_task_index'] = 0
    await show_priority_menu(query, context)

# –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
async def show_priority_menu(destination, context: ContextTypes.DEFAULT_TYPE):
    tasks = context.user_data['plan_tasks']
    idx = context.user_data['current_task_index']
    if idx >= len(tasks):
        await finalize_plan(destination, context)
        return

    task = tasks[idx]
    period = context.user_data['plan_period']
    keyboard = []

    if period == "day":
        keyboard.append([InlineKeyboardButton("üî• –ì–æ—Ä—è—â–∏–π", callback_data="pri_critical")])
        keyboard.append([InlineKeyboardButton("üêç –í—ã—Å–æ–∫–∏–π", callback_data="pri_high")])
        keyboard.append([InlineKeyboardButton("üëΩ –ù–∏–∑–∫–∏–π", callback_data="pri_low")])
    elif period == "week":
        keyboard.append([InlineKeyboardButton("üî• –ì–æ—Ä—è—â–∏–π", callback_data="pri_critical")])
        keyboard.append([InlineKeyboardButton("ü¶é –í—ã—Å–æ–∫–∏–π", callback_data="pri_high")])
        keyboard.append([InlineKeyboardButton("üëΩ –ù–∏–∑–∫–∏–π", callback_data="pri_low")])
    else:
        keyboard.append([InlineKeyboardButton("üî• –ì–æ—Ä—è—â–∏–π", callback_data="pri_critical")])
        keyboard.append([InlineKeyboardButton("üêâ –í—ã—Å–æ–∫–∏–π", callback_data="pri_high")])
        keyboard.append([InlineKeyboardButton("üëΩ –ù–∏–∑–∫–∏–π", callback_data="pri_low")])

    keyboard.append([InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="pri_skip")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    text = f"–ó–∞–¥–∞—á–∞ {idx + 1} –∏–∑ {len(tasks)}:\n\n{task['text']}\n\n–í—ã–±–µ—Ä–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç:"
    if hasattr(destination, 'edit_message_text'):
        await destination.edit_message_text(text=text, reply_markup=reply_markup)
    else:
        await destination.reply_text(text=text, reply_markup=reply_markup)

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
async def set_priority(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    pri = query.data.split("_")[1]
    idx = context.user_data['current_task_index']
    task = context.user_data['plan_tasks'][idx]
    period = context.user_data['plan_period']

    task["priority"] = "low"
    task["icon"] = PRIORITIES["low"]

    if pri == "critical":
        task["priority"] = "critical"
        task["icon"] = PRIORITIES["critical"]
        if period == "day":
            await query.edit_message_text("–î–æ –∫–∞–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–µ–¥–ª–∞–π–Ω? –ù–∞–ø–∏—à–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: 15:00")
        else:
            await query.edit_message_text("–í –∫–∞–∫–æ–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–µ–¥–ª–∞–π–Ω? –ù–∞–ø–∏—à–∏: –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, –í—Ç–æ—Ä–Ω–∏–∫ –∏ —Ç.–¥.")
        context.user_data['awaiting_deadline'] = True
        return
    elif pri == "high":
        task["priority"] = "high"
        if period == "day":
            task["icon"] = PRIORITIES["high_day"]
        elif period == "week":
            task["icon"] = PRIORITIES["high_week"]
        else:
            task["icon"] = PRIORITIES["high_month_year"]
    elif pri == "skip":
        pass  # —É–∂–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é low

    context.user_data['current_task_index'] += 1
    await show_priority_menu(query, context)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ–¥–ª–∞–π–Ω–∞
async def receive_deadline(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get('awaiting_deadline'):
        return
    deadline = update.message.text.strip()
    idx = context.user_data['current_task_index']
    task = context.user_data['plan_tasks'][idx]
    task["deadline"] = deadline
    context.user_data['current_task_index'] += 1
    context.user_data['awaiting_deadline'] = False
    await show_priority_menu(update.message, context)

# –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∞
async def finalize_plan(destination, context: ContextTypes.DEFAULT_TYPE):
    period = context.user_data['plan_period']
    tasks = context.user_data['plan_tasks']
    tag = TAGS.get(period, "")
    header = f"üìÖ –ü–ª–∞–Ω –Ω–∞ {period}"
    if tag:
        header += f" {tag}"
    body = []
    for task in tasks:
        line = f"{task['icon']} {task['text']}"
        if task.get("deadline"):
            line += f" ‚è∞ {task['deadline']}"
        body.append(line)
    full_text = header + "\n\n" + "\n".join(body)

    try:
        sent = await context.bot.send_message(chat_id=CHANNEL_ID, text=full_text)
        plan_id = sent.message_id
        plans.append({
            "id": plan_id,
            "period": period,
            "tasks": tasks,
            "date": datetime.now().isoformat(),
            "type": "plan"
        })
        save()
        if hasattr(destination, 'edit_message_text'):
            await destination.edit_message_text("‚úÖ –ü–ª–∞–Ω –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ!")
        else:
            await destination.reply_text("‚úÖ –ü–ª–∞–Ω –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ!")
    except Exception as e:
        logger.error(e)
        await destination.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ –∫–∞–Ω–∞–ª.")

# /report
async def report_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    available = [p for p in plans if p["type"] == "plan"]
    if not available:
        await update.message.reply_text("–ù–µ—Ç –ø–ª–∞–Ω–æ–≤ –¥–ª—è –æ—Ç—á—ë—Ç–∞.")
        return

    keyboard = []
    periods = ["year", "month", "week", "day"]
    for period in periods:
        latest = next((p for p in reversed(available) if p["period"] == period), None)
        if latest:
            date_str = datetime.fromisoformat(latest["date"]).strftime("%d.%m.%Y")
            keyboard.append([InlineKeyboardButton(f"{period.capitalize()} ({date_str})", callback_data=f"report_{latest['id']}")])

    if not keyboard:
        await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤.")
        return

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ –ø–ª–∞–Ω –¥–ª—è –æ—Ç—á—ë—Ç–∞:", reply_markup=reply_markup)

# –ù–∞—á–∞–ª–æ –æ—Ç—á—ë—Ç–∞
async def start_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    plan_id = int(query.data.split("_")[1])
    plan = next((p for p in plans if p["id"] == plan_id), None)
    if not plan:
        await query.edit_message_text("–ü–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    context.user_data['report_plan'] = plan
    context.user_data['report_results'] = {}
    context.user_data['bonus_tasks'] = []
    context.user_data['report_task_index'] = 0
    await show_report_task(query, context)

# –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á—É –¥–ª—è –æ—Ç—á—ë—Ç–∞
async def show_report_task(destination, context: ContextTypes.DEFAULT_TYPE):
    plan = context.user_data['report_plan']
    idx = context.user_data['report_task_index']
    tasks = plan['tasks']

    if idx >= len(tasks):
        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ", callback_data="add_bonus")],
            [InlineKeyboardButton("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç", callback_data="send_report")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        text = "–í—Å–µ –∑–∞–¥–∞—á–∏ –æ—Ü–µ–Ω–µ–Ω—ã! üéâ\n\n–•–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å, —á—Ç–æ —Å–¥–µ–ª–∞–ª–∞ —Å–≤–µ—Ä—Ö –ø–ª–∞–Ω–∞?"
        if hasattr(destination, 'edit_message_text'):
            await destination.edit_message_text(text=text, reply_markup=reply_markup)
        else:
            await destination.reply_text(text=text, reply_markup=reply_markup)
        return

    task = tasks[idx]
    keyboard = [
        [InlineKeyboardButton("üíã –í—ã–ø–æ–ª–Ω–µ–Ω–∞", callback_data="status_done")],
        [InlineKeyboardButton("üòò –ß–∞—Å—Ç–∏—á–Ω–æ", callback_data="status_partial")],
        [InlineKeyboardButton("ü§¶‚Äç‚ôÄÔ∏è –ù–µ —Å–¥–µ–ª–∞–Ω–∞ (–≤—ã—Å–æ–∫–∏–π)", callback_data="status_failed_high")],
        [InlineKeyboardButton("üï∏ –ù–µ —Å–¥–µ–ª–∞–Ω–∞ (–Ω–∏–∑–∫–∏–π)", callback_data="status_failed_low")],
        [InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="status_skip")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    text = f"–ó–∞–¥–∞—á–∞ {idx + 1} –∏–∑ {len(tasks)}:\n\n{task['text']}\n\n–ö–∞–∫ –ø—Ä–æ—à–ª–∞?"
    if hasattr(destination, 'edit_message_text'):
        await destination.edit_message_text(text=text, reply_markup=reply_markup)
    else:
        await destination.reply_text(text=text, reply_markup=reply_markup)

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
async def set_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    status = query.data.split("_")[1]
    idx = context.user_data['report_task_index']
    plan = context.user_data['report_plan']
    task = plan['tasks'][idx]

    result = {"task": task, "status": status}
    context.user_data['report_results'][idx] = result
    context.user_data['report_task_index'] += 1
    await show_report_task(query, context)

# –î–æ–±–∞–≤–∏—Ç—å –±–æ–Ω—É—Å
async def add_bonus(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("–ù–∞–ø–∏—à–∏, —á—Ç–æ —Å–¥–µ–ª–∞–ª–∞ –∫—Ä—É—Ç–æ–µ, —á–µ–≥–æ –Ω–µ –±—ã–ª–æ –≤ –ø–ª–∞–Ω–µ:")
    context.user_data['awaiting_bonus'] = True

# –ü–æ–ª—É—á–µ–Ω–∏–µ –±–æ–Ω—É—Å–Ω–æ–π –∑–∞–¥–∞—á–∏
async def receive_bonus_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get('awaiting_bonus'):
        return
    task_text = update.message.text.strip()
    if task_text:
        bonus_task = {"text": task_text, "icon": "ü•∞", "priority": "bonus"}
        context.user_data['bonus_tasks'].append({"task": bonus_task, "status": "bonus"})
    context.user_data['awaiting_bonus'] = False

    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë", callback_data="add_bonus")],
        [InlineKeyboardButton("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç", callback_data="send_report")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ! –ß—Ç–æ-—Ç–æ –µ—â—ë?", reply_markup=reply_markup)

# –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç
async def send_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await finalize_report(query, context)

# –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞
async def finalize_report(destination, context: ContextTypes.DEFAULT_TYPE):
    plan = context.user_data['report_plan']
    results = context.user_data['report_results']
    bonus_tasks = context.user_data['bonus_tasks']
    period = plan['period']
    header = f"üìä –û—Ç—á—ë—Ç –ø–æ –ø–ª–∞–Ω—É –Ω–∞ {period}"

    body = ["üìã –ó–∞–¥–∞—á–∏ –∏–∑ –ø–ª–∞–Ω–∞:"]
    stats = {"done": 0, "partial": 0, "failed": 0}

    for i, task in enumerate(plan['tasks']):
        res = results.get(i)
        if res is None:
            priority = task.get("priority", "low")
            if priority in ["critical", "high"]:
                icon = "ü§¶‚Äç‚ôÄÔ∏è"
                stats["failed"] += 1
            else:
                icon = "üï∏"
                stats["failed"] += 1
            line = f"{icon} {task['text']}"
        else:
            status = res['status']
            if status == "done":
                line = f"üíã {task['text']}"
                stats["done"] += 1
            elif status == "partial":
                line = f"üòò {task['text']}"
                stats["partial"] += 1
            elif status == "failed_high":
                line = f"ü§¶‚Äç‚ôÄÔ∏è {task['text']}"
                stats["failed"] += 1
            elif status == "failed_low":
                line = f"üï∏ {task['text']}"
                stats["failed"] += 1
            else:
                priority = task.get("priority", "low")
                icon = "ü§¶‚Äç‚ôÄÔ∏è" if priority in ["critical", "high"] else "üï∏"
                line = f"{icon} {task['text']}"
                stats["failed"] += 1
        body.append(line)

    if bonus_tasks:
        body.append("\nüéÅ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:")
        for b in bonus_tasks:
            if isinstance(b.get('task'), dict):
                body.append(f"ü•∞ {b['task']['text']}")

    total = stats["done"] + stats["partial"] + stats["failed"]
    success_rate = (stats["done"] + stats["partial"]) / total * 100 if total > 0 else 0

    encouragements = [
        "–¢—ã –º–æ–ª–æ–¥–µ—Ü! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å! üåü",
        "–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –Ø —Ç–æ–±–æ–π –≥–æ—Ä–∂—É—Å—å! üíñ",
        "–í–∞—É, –∫–∞–∫ –∑–¥–æ—Ä–æ–≤–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üöÄ",
        "–¢—ã —Å–ø—Ä–∞–≤–∏–ª–∞—Å—å –ª—É—á—à–µ –≤—Å–µ—Ö! üí™",
        "–¢—ã ‚Äî —Å—É–ø–µ—Ä–∑–≤–µ–∑–¥–∞! ‚ú®"
    ]
    encouragement = choice(encouragements)

    full_text = f"{header}\n\n" + "\n".join(body)
    full_text += f"\n\n‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {stats['done']}\nüîÑ –ß–∞—Å—Ç–∏—á–Ω–æ: {stats['partial']}\n‚ùå –ù–µ —Å–¥–µ–ª–∞–Ω–æ: {stats['failed']}\n\n–£—Å–ø–µ—Ö–æ–≤: {success_rate:.1f}%\n\n{encouragement}"

    try:
        await context.bot.send_message(chat_id=CHANNEL_ID, text=full_text)
        plans.append({
            "id": "report_" + str(len(plans)),
            "period": period,
            "date": datetime.now().isoformat(),
            "type": "report",
            "content": full_text
        })
        save()
        if hasattr(destination, 'edit_message_text'):
            await destination.edit_message_text("‚úÖ –û—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª!")
        else:
            await destination.reply_text("‚úÖ –û—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª!")
    except Exception as e:
        logger.error(e)
        await destination.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å—Ç–æ–≤ –≤ –≥—Ä—É–ø–ø–µ —Å "—Ö–≤–∞–ª—é—Å—å"
async def handle_group_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    if not message:
        return
    
    # –õ–æ–≥–∏—Ä—É–µ–º –í–°–ï –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
    logger.info("=== –ù–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï ===")
    logger.info(f"message.text: {message.text}")
    logger.info(f"message.caption: {message.caption}")
    logger.info(f"message.photo: {message.photo}")
    logger.info(f"message.media_group_id: {message.media_group_id}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–æ—Ç–æ –∏ –ø–æ–¥–ø–∏—Å—å
    has_photo = bool(message.photo)
    has_caption = bool(message.caption)
    
    logger.info(f"–°–æ–¥–µ—Ä–∂–∏—Ç —Ñ–æ—Ç–æ: {has_photo}")
    logger.info(f"–°–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–¥–ø–∏—Å—å: {has_caption}")
    
    # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    text = ""
    if message.text:
        text = message.text.lower()
        logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ–º message.text")
    elif message.caption:
        text = message.caption.lower()
        logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ–º message.caption")
    else:
        logger.info("–¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ –æ–¥–Ω–æ–º –∏—Å—Ç–æ—á–Ω–∏–∫–µ")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–ª–æ–≤–∞ "—Ö–≤–∞–ª—é—Å—å"
    has_boast = "—Ö–≤–∞–ª—é—Å—å" in text if text else False
    logger.info(f"–°–æ–¥–µ—Ä–∂–∏—Ç '—Ö–≤–∞–ª—é—Å—å': {has_boast}")
    
    # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Å–ª–æ–≤–æ "—Ö–≤–∞–ª—é—Å—å" ‚Äî —Å—Ç–∞–≤–∏–º —Ä–µ–∞–∫—Ü–∏—é
    if has_boast:
        try:
            await context.bot.set_message_reaction(
                chat_id=message.chat_id,
                message_id=message.message_id,
                reaction=[ReactionTypeEmoji(emoji="üëç")]
            )
            await message.reply_text(choice(reactions))
            logger.info("‚úÖ –†–µ–∞–∫—Ü–∏—è –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–∞–∫—Ü–∏–∏: {e}")
    else:
        logger.info("‚ùå –°–ª–æ–≤–æ '—Ö–≤–∞–ª—é—Å—å' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    application = Application.builder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("add_a_task", add_task))
    application.add_handler(CommandHandler("plan", plan_start))
    application.add_handler(CommandHandler("report", report_start))

    application.add_handler(CallbackQueryHandler(plan_choose_period, pattern=r"^plan_"))
    application.add_handler(CallbackQueryHandler(select_task, pattern=r"^select_task_"))
    application.add_handler(CallbackQueryHandler(manual_task_prompt, pattern=r"^manual_task$"))
    application.add_handler(CallbackQueryHandler(finish_selecting_tasks, pattern=r"^finish_selecting_tasks$"))
    application.add_handler(CallbackQueryHandler(set_priority, pattern=r"^pri_"))
    application.add_handler(CallbackQueryHandler(start_report, pattern=r"^report_"))
    application.add_handler(CallbackQueryHandler(set_status, pattern=r"^status_"))
    application.add_handler(CallbackQueryHandler(add_bonus, pattern=r"^add_bonus$"))
    application.add_handler(CallbackQueryHandler(send_report, pattern=r"^send_report$"))

    application.add_handler(MessageHandler(filters.TEXT & filters.ChatType.PRIVATE, receive_manual_task), group=0)
    application.add_handler(MessageHandler(filters.TEXT & filters.ChatType.PRIVATE, receive_deadline), group=1)
    application.add_handler(MessageHandler(filters.TEXT & filters.ChatType.PRIVATE, receive_bonus_task), group=3)

    application.add_handler(MessageHandler(filters.TEXT & filters.Chat(chat_id=COMMENT_GROUP_ID), handle_group_message))

    application.run_polling()

if __name__ == '__main__':
    main()
